#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import argparse,sys,subprocess,shlex,tempfile,os,shutil,re,struct,time,json
from threading import Thread as T
from datetime import timedelta as td
from string import whitespace as ws
from struct import Struct, error
from queue import Queue

def ass2rate(s,rate):
    h,m,s = [float(x) for x in s.split(':')]
    return int( (24*60*h+60*m+s) * rate )

def cp(i,o,BUFSIZE=4096,n=-1):
    while n!=0:
        n = o.write(i.read(BUFSIZE))
    o.close(); i.close()

def pc(i,m,size):
    st,fmt = Struct("%df"%size),"%f "*size
    while True:
        buf = i.read(st.size)
        if not len(buf): break
        else: m.put(fmt % st.unpack(buf))

def unpack_to_str(audios,sub,default,style,flush,verbose=False):
    # use -af aresample=resampler=soxr -ar 100 to switch to a common output rate
    # and merge all stream. The amerge complex filter can't be used since it can
    # not be taught to use the soxr resampler (the default one does not work)
    # Do this only if resampling is neccesary! Drop all frames after the shortest
    # stream
    files = list(set(f for (d,f) in audios))

    # one special case when files does not contain the subfile
    if sub and not sub[0]['file_index'] in (d['file_index'] for (d,_) in audios):
        print(files)
        print(sub[1])
        files.append(sub[1])

    ins   = [py3k(os.pipe()) for x in files]
    outs  = [py3k(os.pipe()) for x in audios]
    subp  =  py3k(os.pipe()) if sub else None

    rate  = max([int(d['sample_rate']) for (d,f) in audios])
    flush = flush if sub  else True

    cmd  = 'ffmpeg'
    cmd += '' if verbose else ' -hide_banner -loglevel quiet'
    cmd += ''.join(' -i pipe:%d'%r for r,_ in ins)
    cmd += '' if not sub else ' -map %d:%d -f ass pipe:%d'%(sub[0]['file_index'],sub[0]['index'],subp[1])

    for (d,f),(_,w) in zip(audios,outs):
        cmd += ' -map %d:%d'%(d['file_index'],d['index'])
        cmd += ' -f f32le -ar %f'%rate
        cmd += '' if len(files)==1 else ' -af aresample=resampler=soxr:linear_interp=1'
        cmd += ' pipe:%d'%w

    # cmdline built, now copy all files to their respective w parts of in,
    # and read the results for r parts of outs. Do the same for the sub
    if verbose:
        sys.stderr.write(cmd+"\n")

    pid = os.fork()

    if not pid:
        for (_,w) in ins: os.close(w)
        for (r,_) in outs+([subp] if sub else []): os.close(r)

        cmd = cmd.split()
        #cmd = ['strace','-eread,write']+cmd
        #cmd = "ls -l /proc/self/fd".split()
        os.execvp(cmd[0],cmd)
    else:
        for (r,_) in ins: os.close(r)
        for (_,w) in outs+([subp] if sub else []): os.close(w)

        subr = os.fdopen(subp[0],'r') if sub else None
        ins  = [os.fdopen(w,'wb',buffering=2**12) for (_,w) in ins]
        outs = [os.fdopen(r,'rb',buffering=2**12) for (r,_) in outs]
        merg = [Queue()] * len(outs)

        # copy over input files into ffmpeg, and enqueue all input pipes
        i = [T(target=cp,args=(i,o)) for i,o in zip(files,ins)]
        o = [T(target=pc,args=(i,o,d['channels'])) for i,o,(d,_) in zip(outs,merg,audios)]

        # start all the processes
        for t in i+o: t.start()

        # keep track of the one subtitle stream
        default = re.sub('\s+','_',default.strip())
        t,b,e,l = 0,0,float("inf") if not sub else float("-inf"),default

        # read out the input pipes, and the subfile if given
        while all(t.is_alive() for t in o) or not any(q.empty() for q in merg):
            if sub and e<t:
                srt = subr.readline()

                if not len(srt):
                    subr.close()
                    sub=None
                    if not flush: break

                if not "Dialogue: " in srt:
                    continue

                _,beg,end,s,_,_,_,_,_,label = srt.split(',')

                if style and style != s:
                    continue

                l = re.sub('\s+','_',label.strip())
                beg,end = ass2rate(beg,rate),ass2rate(end,rate)

                if beg < e:
                    sys.stderr.write("ERR: found overlapping label at %f secs\n"%(beg/rate))
                    sys.exit(-1)

                b,e = beg,end

            line = ' '.join(q.get() for q in merg)
            print(l if b<t<=e else default, ' ', line)
            t += 1

        pid,status = os.waitpid(pid,0)


def py3k(tup):
    """ brain-deadness of py3k """
    for x in tup: os.set_inheritable(x,True)
    return tup

def group(files):
    sub,result,filecount = None,[],0

    for streams in files:
        for desc,fd in streams:
            desc['file_index'] = filecount

            if desc['codec_type'] == 'subtitle':
                sub = (desc,fd)
            elif desc['codec_type'] == 'audio':
                result.append( (desc,fd) )
            else:
                raise Exception("got unhandled codec_type %s"%desc['codec_type'])

        if sub:
            yield result,sub
            sub,result,filecount = None,[],0
        else:
            filecount += 1

    # stuff without subtitle
    if len(result):
        yield result,None


def probe(buf):
    cmd = "ffprobe -hide_banner -loglevel quiet -of json -show_streams -".split()
    cmd = subprocess.Popen(cmd,stdin=subprocess.PIPE,stdout=subprocess.PIPE)
    o,e = cmd.communicate(buf)
    return json.loads(o.decode("utf-8"))['streams']

if __name__ == '__main__':
    cmdline = argparse.ArgumentParser('unpacks .mkv file (using ffmpeg)')
    cmdline.add_argument('files', type=str, default=["-"], nargs='*',       help="input files")
    cmdline.add_argument('-d', '--default', type=str, default="NULL",       help="default class label for unlabelled data")
    cmdline.add_argument('-s', '--style', type=str, default=None,           help="the class label style to select")
    cmdline.add_argument('-n', '--no-flush', action="store_false",          help="if specified stops output after the last label")
    cmdline.add_argument('-t', '--stream', type=str, nargs='*', default=[], help="select streams to consider by their meta-tag *language* or *name*")
    cmdline.add_argument('-v', '--verbose', action="store_true", help="more verbose output")
    args = cmdline.parse_args()

    # we open each file here already and create an input buffer
    # for probing each input and then writing the read data to
    # ffmpeg in order to not have to read something twice
    iopen = lambda f: open(f,'rb',buffering=2**21)
    sopen = lambda f: os.fdopen(sys.stdin.fileno(),'rb',buffering=2**21)
    files = (iopen(f) if f != '-' else sopen(f) for f in args.files )
    files = [ (probe(f.peek(int(2*1e6))),f) for f in files ]

    # checks if audio or subtitle stream
    okay = lambda d: d['codec_type']=='subtitle' or\
            args.stream==[] and d['codec_type']=='audio' or\
            'LANGUAGE' in d['tags'].keys() and d['tags']['LANGUAGE'] in args.stream or\
                'NAME' in d['tags'].keys() and d['tags']['NAME'] in args.stream

    # filter out all streams which are not neccesary or selected
    files = [[(s,f) for s in ss if okay(s)] for (ss,f) in files ]

    for audio,sub in group(files):
        unpack_to_str(audio,sub,args.default,args.style,args.no_flush,args.verbose)
